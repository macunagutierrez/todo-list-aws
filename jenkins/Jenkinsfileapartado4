pipeline {
    agent any
    environment {
        GIT_TOKEN = credentials('GIT_TOKEN')
        API_URL = ''
        BASE_URL = ''
    }
    stages {
        stage('Get Code') {
            steps {
                echo 'Download git repository'

                git branch: 'develop', url: 'https://${GIT_TOKEN}@github.com/macunagutierrez/todo-list-aws.git'
                sh 'curl -o samconfig.toml https://raw.githubusercontent.com/macunagutierrez/todo-list-aws-config/staging/samconfig.toml'
                echo WORKSPACE
                sh 'dir'
            }
            
        }

        stage('STATIC') {
               
               steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                   sh '''
                       whoami
                       hostname
                       echo ${WORKSPACE}
                       ls
                       flake8 --format=pylint --exit-zero src >flake8.out
                   '''
                   recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                }
               }
        }
        stage('SECURITY Test') {
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                sh '''
                    whoami
                    hostname
                    echo ${WORKSPACE}
                    bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                '''
                recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                }
            }
        }
        stage('DEPLOY') {
          steps {
              sh '''
              ls
              sam build 
              sam deploy --config-env staging
              '''
          }
                     
        }
         stage('GET API') {
           steps {
              script {
                    BASE_URL = sh(script: """
                        aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query "Stacks[0].Outputs[0].OutputValue" --output text
                    """, returnStdout: true).trim()
                    API_URL = BASE_URL
                    env.API_URL = API_URL
                    echo "The API Gateway URL is: ${API_URL}"
                }
          }
                     
        }
        stage('Test curl') {
            steps {
                script {
    
                    def response = sh(script: """
                        curl --location '${API_URL}/todos' \\
                             --header 'Content-Type: application/json' \\
                             --data '{ "text": "UNIR APARTADO C ELEMENTO2" }'
                    """, returnStdout: true).trim()
                    
                    echo "Response:\n${response}"
                    def jsonResponse = new groovy.json.JsonSlurper().parseText(response)
                    if (jsonResponse.statusCode != 200) {
                        error("Unexpected statusCode: ${jsonResponse.statusCode}")
                    }
                     echo "json:\n${jsonResponse}"
                
                }
            }
        }
        stage('PYTEST stage') {
            steps {
               sh '''
                export BASE_URL=${BASE_URL}
                set PYTHONPATH=%WORKSPACE%
                BASE_URL=${BASE_URL} pytest -s --junitxml=result-rest.xml test/integration/todoApiTest.py
                '''
                junit 'result*.xml'
            }
        }

         stage('Merge to Master') {
            steps {
                script {
                        sh """

                            git config --global user.email "miguel.acuna@inetum.com"
                            git config --global user.name "macunagutierrez"
                            git checkout master
                            git merge develop
                            git push https://${GIT_TOKEN}@github.com/macunagutierrez/todo-list-aws.git master
                        """
                
            }
        }
         }
        
       
    }
}
